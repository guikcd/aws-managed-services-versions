# thanks https://coletiv.com/blog/how-to-use-aws-cloud-formation-to-setup-the-infrastructure-for-a-static-website/
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Fetch AWS managed services versions and present them'

Parameters:
  BucketName:
    Type: String
    Default: 'a-proper-bucket-name'
  DomainName:
    Type: String
  AcmCertificateArn:
    Type: String
  NotificationEmail:
    Type: String
    Description: Email to notify if Lambda fail

Resources:
  # Create the bucket to contain the website HTML
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      WebsiteConfiguration:
        ErrorDocument: 'index.html'
        IndexDocument: 'index.html'
      Tags:
        - Key: project
          Value: aws-managed-services-versions

  # Configure the bucket as a CloudFront Origin
  ReadPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Configure Access to CloudFront
  CloudFrontOriginAccessControlConfig:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Ref AWS::StackName
        Name: !Sub 'OAC-${S3Bucket}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # Configure CloudFront
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Comment: aws-managed-services-versions
        CustomErrorResponses:
          - ErrorCode: 403 # not found
            ResponseCode: 404
            ResponsePagePath: '/index.html'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 3600 # in seconds
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 86400 # in seconds
          MinTTL: 60 # in seconds
          TargetOriginId: s3origin
          ViewerProtocolPolicy: 'redirect-to-https'
        # This DefaultRootObject configuration is not enough.
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt 'S3Bucket.DomainName'
            Id: s3origin
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref CloudFrontOriginAccessControlConfig
        Aliases:
         - !Ref DomainName
        ViewerCertificate:
         AcmCertificateArn: !Ref AcmCertificateArn
         MinimumProtocolVersion: 'TLSv1.2_2021'
         SslSupportMethod: sni-only
        PriceClass: 'PriceClass_All'
      Tags:
        - Key: project
          Value: aws-managed-services-versions

  FetchIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: aws-managed-services-versions
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Path: /
      Policies:
        - PolicyName: aws-managed-services-versions-fetch
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBEngineVersions
                  - elasticache:DescribeCacheEngineVersions
                  - mq:DescribeBrokerEngineTypes
                  - elasticbeanstalk:ListAvailableSolutionStacks
                  - es:ListVersions
                  - kafka:ListKafkaVersions
                  - lightsail:GetBlueprints
                  - lightsail:GetRelationalDatabaseBlueprints
                  - eks:DescribeAddonVersions
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/index.html'
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/index2.html'
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:aws-managed-services-versions-failures'
        - PolicyName: aws-managed-services-versions-cloudfront-invalidations
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:ListDistributions
                  - cloudfront:ListTagsForResource
                Resource: '*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource:
                  - !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
      Tags:
        - Key: project
          Value: aws-managed-services-versions
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: aws-managed-services-versions-fetch
      Runtime: python3.11
      Role: !GetAtt 'FetchIAMRole.Arn'
      Handler: generate.lambda_handler
      Code:
        S3Bucket: !Ref BucketName
        S3Key: lambda.zip
      Environment:
        Variables:
          OUTPUT_BUCKET: !Sub '${S3Bucket}'
          OUTPUT_FILE: index.html
      Description: Lambda for fetching AWS versions
      MemorySize: 128
      Timeout: 60
      ReservedConcurrentExecutions: 2
      DeadLetterConfig:
        TargetArn: !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:aws-managed-services-versions-failures"
      Architectures: [arm64] # default: x86_64
      TracingConfig:
        Mode: Active
      Tags:
        - Key: project
          Value: aws-managed-services-versions
  ScheduleLambda:
    Type: AWS::Events::Rule
    Properties:
      Description: Daily run of aws-managed-services-versions-fetch function
      Name: aws-managed-services-versions-fetch-schedule
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt 'Lambda.Arn'
          Id: "TargetFunctionV1"
          Input: '{"description": "Daily run of aws-managed-services-versions-fetch"}'
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt 'ScheduleLambda.Arn'

  GitHubDeployRole:
    Type: AWS::IAM::Role
    Properties:
        RoleName: github-deploy-aws-managed-services
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Federated: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringLike:
                  token.actions.githubusercontent.com:sub: repo:guikcd/aws-managed-services-versions:*
        Path: /
        Policies:
          - PolicyName: aws-managed-services-s3-lambda-update
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:GetObject
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/lambda.zip'
                - Effect: Allow
                  Action:
                    - lambda:UpdateFunctionCode
                    - lambda:InvokeFunction
                  Resource: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}'
        Tags:
          - Key: project
            Value: aws-managed-services-versions
          - Key: createdBy
            Value: aws-managed-services-versions Cloudformation stack

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: aws-managed-services-versions-failures
      Subscription:
      - Endpoint: !Ref NotificationEmail
        Protocol: email
      Tags:
        - Key: "project"
          Value: "aws-managed-services-versions"

Outputs:
  Bucket:
    Description: 'S3 Bucket Name'
    Value: !Ref S3Bucket
  BucketUrl:
    Description: 'S3 Bucket Url'
    Value: !GetAtt 'S3Bucket.WebsiteURL'
  DistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
  Domain:
    Description: 'Cloudfront Domain'
    Value: !GetAtt CloudFrontDistribution.DomainName
  GitHubDeployRole:
    Description: 'GitHub role arn to deploy'
    Value: !GetAtt GitHubDeployRole.Arn
